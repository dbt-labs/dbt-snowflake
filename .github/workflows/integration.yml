# **what?**
# This workflow runs all integration tests for supported OS
# and python versions and core adapters. If triggered by PR,
# the workflow will only run tests for adapters related
# to code changes. Use the `test all` and `test ${adapter}`
# label to run all or additional tests. Use `ok to test`
# label to mark PRs from forked repositories that are safe
# to run integration tests for. Requires secrets to run
# against different warehouses.

# **why?**
# This checks the functionality of dbt from a user's perspective
# and attempts to catch functional regressions.

# **when?**
# This workflow will run on every push to a protected branch
# and when manually triggered. It will also run for all PRs, including
# PRs from forks. The workflow will be skipped until there is a label
# to mark the PR as safe to run.

name: Adapter Integration Tests

on:
  # pushes to release branches
  push:
    branches:
      - "main"
      - "develop"
      - "*.latest"
      - "releases/*"
  # all PRs, important to note that `pull_request_target` workflows
  # will run in the context of the target branch of a PR
  pull_request_target:
  # manual trigger
  workflow_dispatch:
    inputs:
      dbt-core-branch:
        description: "branch of dbt-core to use in dev requirements"
        required: false
        type: string

# explicitly turn off permissions for `GITHUB_TOKEN`
permissions: read-all

# will cancel previous workflows triggered by the same event and for the same ref for PRs or same SHA otherwise
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ contains(github.event_name, 'pull_request') && github.event.pull_request.head.ref || github.sha }}
  cancel-in-progress: true

# sets default shell to bash, for all operating systems
defaults:
  run:
    shell: bash

jobs:
  # generate test metadata about what files changed and the testing matrix to use
  test-metadata:
    # run if not a PR from a forked repository or has a label to mark as safe to test
    if: >-
      github.event_name != 'pull_request_target' ||
      github.event.pull_request.head.repo.full_name == github.repository ||
      contains(github.event.pull_request.labels.*.name, 'ok to test')

    runs-on: ubuntu-latest

    outputs:
      matrix: ${{ steps.generate-matrix.outputs.result }}

    steps:
      - name: Check out the repository (non-PR)
        if: github.event_name != 'pull_request_target'
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Check out the repository (PR)
        if: github.event_name == 'pull_request_target'
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Check if relevant files changed
        if: github.event_name == 'pull_request_target'
        # https://github.com/marketplace/actions/paths-changes-filter
        # For each filter, it sets output variable named by the filter to the text:
        #  'true' - if any of changed files matches any of filter rules
        #  'false' - if none of changed files matches any of filter rules
        # also, returns:
        #  `changes` - JSON array with names of all filters matching any of the changed files
        uses: dorny/paths-filter@v2
        id: get-changes
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: |
            snowflake:
              - 'dbt/**'
              - 'tests/**'
              - 'pyproject.toml'

      - name: Generate integration test matrix
        id: generate-matrix
        uses: actions/github-script@v6
        env:
          CHANGES: ${{ steps.get-changes.outputs.changes }}
        with:
          script: |
            const script = require('./.github/scripts/integration-test-matrix.js')
            const matrix = script({ context })
            console.log(matrix)
            return matrix

  integration-tests:
    name: Integration Tests / Python ${{ matrix.python-version }} / ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: test-metadata
    # run if not a PR from a forked repository or has a label to mark as safe to test
    # also checks that the matrix generated is not empty
    if: >-
      needs.test-metadata.outputs.matrix &&
      fromJSON( needs.test-metadata.outputs.matrix ).include[0] &&
      (
        github.event_name != 'pull_request_target' ||
        github.event.pull_request.head.repo.full_name == github.repository ||
        contains(github.event.pull_request.labels.*.name, 'ok to test')
      )

    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.test-metadata.outputs.matrix) }}

    env:
      DBT_INVOCATION_ENV: github-actions
      DD_CIVISIBILITY_AGENTLESS_ENABLED: true
      DD_API_KEY: ${{ secrets.DATADOG_API_KEY }}
      DD_SITE: datadoghq.com
      DD_ENV: ci
      DD_SERVICE: ${{ github.event.repository.name }}

    steps:
      - uses: actions/checkout@v3
        if: github.event_name == 'pull_request_target'
        with:
          persist-credentials: false
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: actions/checkout@v3
        if: github.event_name != 'pull_request_target'
        with:
          persist-credentials: false
      - uses: ./.github/actions/run-integration-tests
        with:
          python-version: ${{ matrix.python-version }}
          dbt-core-branch: ${{ inputs.dbt-core-branch }}
      - uses: ./.github/actions/archive-test-results
        with:
          python-version: ${{ matrix.python-version }}
          file-name-stub: integration_results
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: logs
          path: ./logs

  require-label-comment:
    runs-on: ubuntu-latest
    needs: integration-tests
    permissions:
      pull-requests: write
    steps:
      - name: Needs permission PR comment
        if: >-
          needs.integration-tests.result == 'skipped' &&
          github.event_name == 'pull_request_target' &&
          github.event.pull_request.head.repo.full_name != github.repository
        uses: unsplash/comment-on-pr@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          msg: |
            "You do not have permissions to run integration tests, @dbt-labs/core "\
            "needs to label this PR with `ok to test` in order to run integration tests!"
          check_for_duplicate_msg: true
