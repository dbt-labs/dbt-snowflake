# **what?**
# This workflow runs all integration tests for supported OS
# and python versions and core adapters. If triggered by PR,
# the workflow will only run tests for adapters related
# to code changes. Use the `test all` and `test ${adapter}`
# label to run all or additional tests. Use `ok to test`
# label to mark PRs from forked repositories that are safe
# to run integration tests for. Requires secrets to run
# against different warehouses.

# **why?**
# This checks the functionality of dbt from a user's perspective
# and attempts to catch functional regressions.

# **when?**
# This workflow will run on every push to a protected branch
# and when manually triggered. It will also run for all PRs, including
# PRs from forks. The workflow will be skipped until there is a label
# to mark the PR as safe to run.

name: Adapter Integration Tests

on:
  # pushes to release branches
  push:
    branches:
      - "main"
      - "develop"
      - "*.latest"
      - "releases/*"
  # all PRs, important to note that `pull_request_target` workflows
  # will run in the context of the target branch of a PR
  pull_request_target:
  # manual trigger
  workflow_dispatch:
    inputs:
      dbt-core-branch:
        description: "branch of dbt-core to use in dev requirements"
        required: false
        type: string

# explicitly turn off permissions for `GITHUB_TOKEN`
permissions: read-all

# will cancel previous workflows triggered by the same event and for the same ref for PRs or same SHA otherwise
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ contains(github.event_name, 'pull_request') && github.event.pull_request.head.ref || github.sha }}
  cancel-in-progress: true

# sets default shell to bash, for all operating systems
defaults:
  run:
    shell: bash

jobs:

  ok-to-test:
    name: OK to Run
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    outputs:
      result: ${{ steps.is_approved.outputs.result }}
    steps:
      - id: is_approved
        run: |
          result= \
            ${{ github.event_name }} == 'pull_request_target' || \
            ${{ github.event.pull_request.head.repo.full_name }} == '${{ github.repository }}' || \
            ${{ contains(github.event.pull_request.labels.*.name, 'ok to test') }}
          echo "result=$(result)" >> $GITHUB_OUTPUT
      - if: ${{ steps.is_approved.outputs.result == false }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: unsplash/comment-on-pr@master
        with:
          msg: |
            "You do not have permissions to run integration tests, @dbt-labs/core "\
            "needs to label this PR with `ok to test` in order to run integration tests!"
          check_for_duplicate_msg: true

  generate-test-matrix:
    name: Generate Test Matrix
    runs-on: ubuntu-latest
    needs: ok-to-test
    if: ${{ needs.ok-to-test.outputs.result }}
    outputs:
      matrix: ${{ steps.generate-test-matrix.outputs.result }}
    steps:
      - name: Check out the repository (non-PR)
        if: github.event_name != 'pull_request_target'
        uses: actions/checkout@v3
        with:
          persist-credentials: false
      - name: Check out the repository (PR)
        if: github.event_name == 'pull_request_target'
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: ./.github/actions/generate-test-matrix
        id: generate-test-matrix
        with:
          python-version: ${{ matrix.python-version }}
          dbt-core-branch: ${{ inputs.dbt-core-branch }}

  integration-tests:
    name: Integration Tests / Python ${{ matrix.python-version }} / ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: generate-test-matrix
    # run if not a PR from a forked repository or has a label to mark as safe to test
    # also checks that the matrix generated is not empty
    if: >-
      needs.generate-test-matrix.outputs.matrix &&
      fromJSON( needs.generate-test-matrix.outputs.matrix ).include[0]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.test-metadata.outputs.matrix) }}
    env:
      SNOWFLAKE_TEST_ACCOUNT: ${{ secrets.SNOWFLAKE_TEST_ACCOUNT }}
      SNOWFLAKE_TEST_PASSWORD: ${{ secrets.SNOWFLAKE_TEST_PASSWORD }}
      SNOWFLAKE_TEST_USER: ${{ secrets.SNOWFLAKE_TEST_USER }}
      SNOWFLAKE_TEST_WAREHOUSE: ${{ secrets.SNOWFLAKE_TEST_WAREHOUSE }}
      SNOWFLAKE_TEST_OAUTH_REFRESH_TOKEN: ${{ secrets.SNOWFLAKE_TEST_OAUTH_REFRESH_TOKEN }}
      SNOWFLAKE_TEST_OAUTH_CLIENT_ID: ${{ secrets.SNOWFLAKE_TEST_OAUTH_CLIENT_ID }}
      SNOWFLAKE_TEST_OAUTH_CLIENT_SECRET: ${{ secrets.SNOWFLAKE_TEST_OAUTH_CLIENT_SECRET }}
      SNOWFLAKE_TEST_ALT_DATABASE: ${{ secrets.SNOWFLAKE_TEST_ALT_DATABASE }}
      SNOWFLAKE_TEST_ALT_WAREHOUSE: ${{ secrets.SNOWFLAKE_TEST_ALT_WAREHOUSE }}
      SNOWFLAKE_TEST_DATABASE: ${{ secrets.SNOWFLAKE_TEST_DATABASE }}
      SNOWFLAKE_TEST_QUOTED_DATABASE: ${{ secrets.SNOWFLAKE_TEST_QUOTED_DATABASE }}
      SNOWFLAKE_TEST_ROLE: ${{ secrets.SNOWFLAKE_TEST_ROLE }}
      DBT_TEST_USER_1: dbt_test_role_1
      DBT_TEST_USER_2: dbt_test_role_2
      DBT_TEST_USER_3: dbt_test_role_3
    steps:
      - uses: actions/checkout@v3
        if: github.event_name == 'pull_request_target'
        with:
          persist-credentials: false
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: actions/checkout@v3
        if: github.event_name != 'pull_request_target'
        with:
          persist-credentials: false
      - uses: ./.github/actions/run-integration-tests
        with:
          python-version: ${{ matrix.python-version }}
          dbt-core-branch: ${{ inputs.dbt-core-branch }}
      - uses: ./.github/actions/archive-test-results
        with:
          python-version: ${{ matrix.python-version }}
          file-name-stub: integration_results
