# **what?**
# Runs code quality checks, unit tests, and verifies python build on
# all code commited to the repository. This workflow should not
# require any secrets since it runs for PRs from forked repos.
# By default, secrets are not passed to workflows running from
# a forked repo.

# **why?**
# Ensure code for dbt meets a certain quality standard.

# **when?**
# This will run for all PRs, when code is pushed to a release
# branch, and when manually triggered.

name: Tests and Code Checks

on:
  push:
    branches:
      - "main"
      - "develop"
      - "*.latest"
      - "releases/*"
  pull_request:
  workflow_dispatch:

permissions: read-all

# will cancel previous workflows triggered by the same event and for the same ref for PRs or same SHA otherwise
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ contains(github.event_name, 'pull_request') && github.event.pull_request.head.ref || github.sha }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  code-quality:
    name: Code Quality

    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --user --upgrade pip
          python -m pip install .[dev]

      - name: Run pre-commit hooks
        run: pre-commit run --all-files --show-diff-on-failure

  unit:
    name: Unit Tests / Python ${{ matrix.python-version }}

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --user --upgrade pip
          python -m pip install .[test]

      - name: Run unit tests
        run: python -m pytest tests/unit

      - name: Get current date
        if: always()
        id: date
        run: echo "date=$(date +'%Y-%m-%dT%H_%M_%S')" >> $GITHUB_OUTPUT #no colons allowed for artifacts

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: unit_results_${{ matrix.python-version }}-${{ steps.date.outputs.date }}.csv
          path: test_results.csv

  build:
    name: Build Artifacts

    runs-on: ubuntu-latest

    outputs:
      is_alpha: ${{ steps.check-is-alpha.outputs.is_alpha }}

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --user --upgrade pip
          python -m pip install .[build]

      - name: Build distributions
        run: python -m build

      - name: Show distributions
        run: ls -lh dist/

      - name: Check distribution descriptions
        run: twine check dist/*

      - name: Check wheel contents
        run: check-wheel-contents dist/*.whl --ignore W007,W008

      - name: Check if this is an alpha version
        id: check-is-alpha
        run: |
          export is_alpha=0
          if [[ "$(ls -lh dist/)" == *"a1"* ]]; then export is_alpha=1; fi
          echo "is_alpha=$is_alpha" >> $GITHUB_OUTPUT

      - uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  test-build:
    name: Verify Artifacts / Python ${{ matrix.python-version }} / ${{ matrix.os }}

    if: needs.build.outputs.is_alpha == 0

    needs: build

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --user --upgrade pip
          python -m pip install --upgrade wheel

      - uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Show distributions
        run: ls -lh dist/

      - name: Verify wheel distributions
        run: |
          find ./dist/*.whl -maxdepth 1 -type f | xargs python -m pip install --force-reinstall --find-links=dist/
          dbt --version

      - name: Verify source distributions
        run: |
          find ./dist/*.gz -maxdepth 1 -type f | xargs python -m pip install --force-reinstall --find-links=dist/
          dbt --version
